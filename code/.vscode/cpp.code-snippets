{
	// Place your code ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"template":{
		"prefix": "tmp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
			"#define rep2(i, s, n) for (int i = (s); i < (int)(n); i++)",
			"vector<int> x={1,1,1,0,0,-1,-1,-1},y={1,0,-1,1,-1,1,0,-1}",
			"int main() {",
			"}",
		],
		"description": "atcoderのテンプレート"
	},

	"greatest common divisor": {
		"prefix": "gcd",
		"body": [
			"int gcd(int a, int b) {",
			"    return b ? gcd(b, a%b) : a;",
			"}",
		],
		"description": "最大公約数"
	},

	
	"least common multiple": {
		"prefix": "lcm",
		"body": [
			"int lcm(int a, int b) {",
			"return a / gcd(a, b) * b;",
			"}",
		],
		"description": "最小公倍数"
	},

	"primality test":{
		"prefix": "isPrime",
		"body": [
			"bool isPrime(int x){",
			"   int i;",
			"   if(x < 2)return 0;",
			"   else if(x == 2) return 1;",
			"   if(x%2 == 0) return 0;",
		    "   for(i = 3; i*i <= x; i += 2) if(x%i == 0) return 0;",
			"   return 1;",
			"}",
		],
		"description": "素数かどうかを判定する。素数なら１を素数でないなら０を返す"
	},
	
	"digit sum":{
		"prefix": "digsum",
		"body": [
			"int digsum(int n) {",
			"    int res = 0;",
			"    while(n > 0) {",	
			"       res += n%10;",
			"       n /= 10;",
			"    }",
			"return res;",
			"}",
		],
		"description": "各桁の和を返す"
		
	},

	"string count":{
		"prefix": "stringcount",
		"body": [
			"int stringcount(string s, char c) {",
			"    return count(s.cbegin(), s.cend(), c)",
			"}",
		],
		"description": "文字列中に存在する特定の文字の個数を数える"
	},

	"breadth-first search":{
		"prefix": "BFS",
		"body": [
			"using Graph = vector<vector<int>>;",
			
			"int main() {",
			"    // 頂点数と辺数",
			"    int N, M; cin >> N >> M;",
			
			"    // グラフ入力受取 (ここでは無向グラフを想定)",
			"    Graph G(N);",
			"    for (int i = 0; i < M; ++i) {",
			"        int a, b;",
			"        cin >> a >> b;",
			"        G[a].push_back(b);",
			"        G[b].push_back(a);",
			"    }",
			
			"    // BFS のためのデータ構造",
			"    vector<int> dist(N, -1); // 全頂点を「未訪問」に初期化",
			"    queue<int> que;",
			
			"    // 初期条件 (頂点 0 を初期ノードとする)",
			"    dist[0] = 0;",
			"    que.push(0); // 0 を橙色頂点にする",
		
			"    // BFS 開始 (キューが空になるまで探索を行う)",
			"    while (!que.empty()) {",
			"        int v = que.front(); // キューから先頭頂点を取り出す",
			"        que.pop();",
			
			"        // v から辿れる頂点をすべて調べる",
			"        for (int nv : G[v]) {",
			"            if (dist[nv] != -1) continue; // すでに発見済みの頂点は探索しない",
			
			"            // 新たな白色頂点 nv について距離情報を更新してキューに追加する",
			"            dist[nv] = dist[v] + 1;",
			"            que.push(nv);",
			"        }",
			
			"    // 結果出力 (各頂点の頂点 0 からの距離を見る)",
			"    for (int v = 0; v < N; ++v) cout << v << dist[v] << endl;",
			"}",
		],
		"description": [
			"幅優先探索",
			"vector<int> dist[v] はスタート頂点から頂点 v まで何ステップで到達できるかを表す",
			"queue<int> que はその時点での橙色頂点 (発見済みだが未訪問な頂点) を格納するキュー"
		],
		

	},

	"deepth-first search":{
		"prefix": "DFS",
		"body": [
			"using Graph = vector<vector<int>>;",
			"vector<bool> seen;",
			"void dfs(const Graph &G, int v) {",
			"    seen[v] = true; //v を訪問済みにする",
			"    //v から行ける各頂点 next_v について",
			"    for (auto next_v : G[v]) {", 
			"        if (seen[next_v]) continue; // 移動先が訪問済みならスルー",
			"        dfs(G, next_v); // 再帰的に探索",
			"    }",
		"}",
		],
		"description":[
			"深さ優先探索",
			"vector<bool> seen はその時点での訪問した頂点を格納する配列",
		],
	},

	"Binary search":{
		"prefix": "BS",
		"body":[
			"int binary_search(int x){",
			"int L = 1, R = n;",
			"while(L <= R){",
			"int M = (L + R)/2;",
			"if(x < a[M]) R = M-1;",
			"if(x == a[M]) return M;",
			"if(x > a[M]) L = M+1;",
			"}",
			"return -1;",
			"}",	
		],
		"description": [
			"二分探索",
			
		],
	},

	"modpow":{
		"prefix": "modpow",
		"body": [
			"long long modpow(long long a, long long b, long long m){",
			"    long long p = a, ans = 1;",
			"    for(int i = 0; i < 60; i++){",
			"        long long wari = (1ll << i);",
			"        if((b / wari) % 2 == 1){",
			"            ans = (ans * p) % m;",
			"        }",
			"        p = (p * p) % m;",
			"    }",
			"    return ans;",
			"}",
		],
		"description": [
			"aのb乗をmで割った余りを返す関数",
		],
	},

}