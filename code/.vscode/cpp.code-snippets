
{
	"template":{
		"prefix": "tmp",
		"body": [
			"#include <bits/stdc++.h>",
"using namespace std;",
"using ll = long long;",
"using ull = unsigned long long;",
"const double pi = acos(-1);",
"#define OVERLOAD_REP(_1, _2, _3, name, ...) name",
"#define REP1(i, n) for (auto i = std::decay_t<decltype(n)>{}; (i) != (n); ++(i))",
"#define REP2(i, l, r) for (auto i = (l); (i) != (r); ++(i))",
"#define rep(...) OVERLOAD_REP(__VA_ARGS__, REP2, REP1)(__VA_ARGS__)",
"#define all(p) (p).begin(), (p).end()",
"#define exists(c, e) ((c).find(e) != (c).end())",
"template<class T> bool chmin(T& a,T b) { if(a > b){a = b; return true;} return false; }",
"template<class T> bool chmax(T& a,T b) { if(a < b){a = b; return true;} return false; }",
"template<class T>constexpr T INF() { return ::std::numeric_limits<T>::max(); }",
"template<class T>constexpr T HINF() { return INF<T>() / 2; }",
"const int dy[] = {1, 0, -1, 0};",
"const int dx[] = {0, 1, 0, -1};",
"",
"struct INIT{",
 "INIT(){",
  "std::ios::sync_with_stdio(false);",
  "std::cin.tie(0);",
  "cout << fixed << setprecision(20);",
 "}",
"}INIT;"
		],
		"description": "atcoderのテンプレート"
	},

	"greatest common divisor": {
		"prefix": "gcd",
		"body": [
			"int gcd(int a, int b) { return b ? gcd(b, a%b) : a;}"
		],
		"description": "最大公約数"
	},

	
	"least common multiple": {
		"prefix": "lcm",
		"body": [
			"ll lcm(ll a, ll b) { return a / gcd(a, b) * b;}"
		],
		"description": "最小公倍数"
	},



	"primality test":{
		"prefix": "isPrime",
		"body": [
			"bool isPrime(int x){",
			"   int i;",
			"   if(x < 2)return 0;",
			"   else if(x == 2) return 1;",
			"   if(x%2 == 0) return 0;",
			"   for(i = 3; i*i <= x; i += 2) if(x%i == 0) return 0;",
			"   return 1;",
			"}"
		],
		"description": "素数かどうかを判定する。素数なら１を素数でないなら０を返す"
	},
	
	"digit sum":{
		"prefix": "digsum",
		"body": [
			"int digsum(int n) {",
			"    int res = 0;",
			"    while(n > 0) {",	
			"       res += n%10;",
			"       n /= 10;",
			"    }",
			"return res;",
			"}"
		],
		"description": "各桁の和を返す"
		
	},

	"string count":{
		"prefix": "stringcount",
		"body": [
			"int stringcount(string s, char c) {",
			"    return count(s.cbegin(), s.cend(), c)",
			"}"
		],
		"description": "文字列中に存在する特定の文字の個数を数える"
	},

	"breadth-first search":{
		"prefix": "BFS",
		"body": [
			"using Graph = vector<vector<int>>;",
			"int main() {",
			"    int N, M; cin >> N >> M;",
			"    Graph G(N);",
			"    for (int i = 0; i < M; ++i) {",
			"        int a, b;",
			"        cin >> a >> b;",
			"        a--, b--;",
			"        G[a].push_back(b);",
			"        G[b].push_back(a);",
			"    }",
			"    vector<int> dist(N, -1);",
			"    queue<int> que;",
			"    dist[0] = 0;",
			"    que.push(0);",
			"",
			"    while (!que.empty()) {",
			"        int v = que.front();",
			"        que.pop();",
			"        for (int nv : G[v]) {",
			"            if (dist[nv] != -1) continue;",
			"            dist[nv] = dist[v] + 1;",
			"            que.push(nv);",
			"        }",
			"    }",
			"    for (int v = 0; v < N; ++v) cout << v << dist[v] << endl;",
			"}"
		],
		"description": [
			"幅優先探索",
			"vector<int> dist[v] はスタート頂点から頂点 v まで何ステップで到達できるかを表す",
			"queue<int> que はその時点での橙色頂点 (発見済みだが未訪問な頂点) を格納するキュー"
		]
	},

	"deepth-first search":{
		"prefix": "DFS",
		"body": [
			"using Graph = vector<vector<int>>;",
			"vector<bool> seen;",
			"void dfs(const Graph &G, int v) {",
			"    seen[v] = true;",
			"    for (auto next_v : G[v]) {", 
			"        if (seen[next_v]) continue;",
			"        dfs(G, next_v);",
			"    }",
		"}"
		],
		"description":[
			"深さ優先探索",
			"vector<bool> seen はその時点での訪問した頂点を格納する配列"
		]
	},

	"Binary search":{
		"prefix": "BS",
		"body":[
			"int binary_search(int x){",
			"int ok = 1 //解が存在する値",
			"int ng = n; //解が存在しない値",
			"while(abs(ok - ng) > 1){",
			"    int mid = (ok + ng)/2;",
			"    if(solve(mid, x) ok = mid;",
			"    else ng = mid;",
			"}",
			"return ok;"
		],
		"description": [
			"二分探索"
			
		]
	},

	"modpow":{
		"prefix": "modpow",
		"body": [
			"long long modpow(long long a, long long b, long long m){",
			"    long long p = a, ans = 1;",
			"    for(int i = 0; i < 60; i++){",
			"        long long wari = (1ll << i);",
			"        if((b / wari) % 2 == 1){",
			"            ans = (ans * p) % m;",
			"        }",
			"        p = (p * p) % m;",
			"    }",
			"    return ans;",
			"}"
		],
		"description": [
			"aのb乗をmで割った余りを返す関数"
		]
	},

	"Basen to long":{
		"prefix": "basen number",
		"body": [
			"long long basen_to_long (string n, long long p){",
			"    long long ans = 0, x = 1, m = n.size();",
			"    for(int i = m-1; i >= 0; i--){",
			"        ans += 1LL * (n[i]-'0') * x;",
			"        x *= (ll)(p);",
			"    }",
			"    return ans;",
			"}"
		],
		"description": "n進数を10進数に変換する関数"
	},

	"Long to Basen":{
		"prefix": "longtobasen",
		"body": [
			"string long_to_base9(long long n, long long p){",
			"    string ans;",
			"    while(n>0){",
			"        char c = {(n%p)+'0'};",
			"        ans = c + ans;",
			"        n /= p;",
			"    }",
			"    return ans;",
			"}"
		],
		"description": "10進数をn進数に変換する関数"
	},

	"distance":{
		"prefix": "distance",
		"body": [
			"long double distance(ll ax, ll ay, ll bx, ll by){",
    		"    return sqrt((ax-bx)*(ax-bx)+(ay-by)*(ay-by));",
			"}"
		],
		"description": "二次元座標の距離を求める関数"
	},

	"sieve":{
		"prefix": "sieve",
		"body": [
			"const int L = 4000000;",
			"vector<ll> primes;",
			"void sieve() {",
    		"    vector<bool> is_prime(L + 1, true);",
    		"    is_prime[0] = is_prime[1] = false;",
    		"    for (ll i = 2; i <= L; ++i) {",
        	"        if (is_prime[i]) {",
            "            primes.push_back(i);",
            "            for (ll j = (ll)i * i; j <= L; j += i) {",
            "               is_prime[j] = false;",
            "            }",
            "        }",
            "    }",
			"}"
		],
		"description": "エラトステネスの篩"
	},

	"my_compare":{
		"prefix":"my_compare",
		"body":[
			"bool my_compare(pair<int, int> a, pair<int, int> b) {",
			"    if(a.first != b.first){",
			"         return a.first > b.first;",
			"    }",
			"    return a.second < b.second;",
			"}"
		],
		"description":"sort(all(?), ココ)"
	}
}